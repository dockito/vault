#!/bin/sh

# allow overriding location of credential store
: ${CREDENTIALFILE:=/vault/store/git-credentials}

usage () {
    echo "Usage:
    $(basename $0) set URL
    $(basename $0) remove URL
    $(basename $0) list
    $(basename $0) clear

Examples:
    $(basename $0) set github.com
    $(basename $0) set gitlab.com/foo/bar
    $(basename $0) remove github.com
"
}

# parse arguments
while [ $# -ge 1 ]; do
    case "$1" in
        set|remove)
            if  [ $# -eq 2 ]; then
                CMD="credentials_$1 $2"
                shift
            fi
            break
            ;;
        list|clear)
            CMD="credentials_$1"
            break
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
            ;;
    esac

    shift
done

if [ $# -ne 1 ] || [ -z "$CMD" ]; then
    usage
    exit 1
fi

# helper to url-encode username and password using javascript
# proper escaping for username & password, see: https://gist.github.com/pierrevalade/6025241
encodeurl () {
    node <<EOF
var escape = function(str) {
  return encodeURIComponent(str).replace(/[!*()']/g, function(character) {
    return '%' + character.charCodeAt(0).toString(16);
  });
};
console.log(escape('$1'))
EOF
}

mask_passwords () {
    # replace passwords with ****** and discard non-matching lines
    sed -n 's|^\(.*://.*:\)\(.*\)\(@.*\)$|\1******\3|p'
}

credentials_remove () {
    # remove leading https://
    URL="$( echo "$1" | sed -e 's#^.*://##' )"

    # remove existing entry
    matching=`grep "@$URL\$" "$CREDENTIALFILE" 2>/dev/null`
    if [ -n "$matching" ]; then
        tempfile=`mktemp -t git-credentials-XXXXXX`
        grep -v "@$URL\$"  "$CREDENTIALFILE" > "$tempfile"
        mv "$tempfile" "$CREDENTIALFILE"
    else
        echo "No credentials for '$URL'"
        exit 1
    fi
}

credentials_set () {
    # remove leading https://
    URL="$( echo "$1" | sed -e 's#^.*://##' )"

    # remove existing entry
    matching=`grep "@$URL\$" "$CREDENTIALFILE" 2>/dev/null`
    if [ -n "$matching" ]; then
        echo "Removing existing entries:"
        echo "$matching" | mask_passwords
        read -p "Continue? [yN]: " CONFIRM
        if ! [ "$CONFIRM" = "y" ]; then
            exit 1
        fi
        credentials_remove $URL
        echo ""
    fi

    echo "Adding credentials for 'https://$URL'."
    read -p "Username: " USER
    read -p "Password: " -s PASSWORD
    echo ""

    USER=`encodeurl "$USER"`
    PASSWORD=`encodeurl "$PASSWORD"`

    echo "https://$USER:$PASSWORD@$URL" >> "$CREDENTIALFILE"
    chmod 600 "$CREDENTIALFILE"
}

credentials_list () {
    if [ -f "$CREDENTIALFILE" ]; then
        # mask passwords and sort by URL (which starts after the "@")
        cat "$CREDENTIALFILE" | mask_passwords | sort -k 2 -t "@"
    fi
}

credentials_clear () {
    echo "" > "$CREDENTIALFILE"
}


$CMD
