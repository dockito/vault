#!/bin/bash

# signals bash to stop execution on any fail
set -e

# allow everriding default VAULT_HOST at runtime
# otherwise will get the docker bridge ip network
: ${VAULT_HOST:=$(ip route|awk '/default/{print $3}')}

# allow overriding (probably trough Docker Link) default VAULT_PORT at runtime
: ${VAULT_PORT:=tcp://${VAULT_HOST}:14242}

# allow overriding default VAULT_URI at runtime
: ${VAULT_URI:=${VAULT_PORT/tcp/http}}

# allow overriding default VAULT_SSH_KEY at runtime
: ${VAULT_SSH_KEY:=id_rsa}

# allow multiple dot directories to be managed
: ${VAULT_DIRS:=ssh}

# just for documentation
: ${VAULT_IMAGE:=dockito/vault}

# allow multiple dot directories to be managed
: ${VAULT_BUNDLE_CREDENTIALS:=}

# parse arguments
while [[ "$#" > 1 ]]; do case $1 in
    --disable-pwd) DISABLE_PASSWORD="$2";;
    *) break;;
  esac; shift; shift
done

log () {
  GREEN='\033[1;32m'
  NC='\033[0m' # No Color
  >&2 echo -e "${GREEN}[Dockito Vault]${NC} $@"
}

error () {
  RED='\033[1;31m'
  NC='\033[0m' # No Color
  >&2 echo -e "${RED}[Dockito Vault]${NC} $@"
}

# don't go through proxy for accessing vault
no_proxy_old="$no_proxy"
export no_proxy="$VAULT_HOST"

if curl --connect-timeout 1 -s "${VAULT_URI}/_ping"; then
  log "Downloading private keys..."
  tmp_vault=~/".vault-backup-$(date +%s)"
  mkdir $tmp_vault
  for vault_dir in $VAULT_DIRS; do
    if [[ -e ~/.${vault_dir} ]]; then
      mv ~/.${vault_dir} ${tmp_vault}
    fi
    mkdir ~/.${vault_dir}

    curl -s "${VAULT_URI}/${vault_dir}.tgz" | tar -C ~/.${vault_dir}/ -zxf -
    chown -f `whoami` ~/.${vault_dir}/* || true
    chmod -f 600 ~/.${vault_dir}/* || true

    if [[ ${vault_dir} == bundle ]]; then
      # more special handling of that nasty .bundle/config file. We ONLY want to bring over credentials, but the format
      # for credentials is rather open-ended. Example: credentials for google.com would be stored as BUNDLE_GOOGLE__COM: "username:password"
      # We solve this by allowing for a VAULT_BUNDLE_CREDENTIALS environment varialbe that is a space-deliminted list
      # of gem server hostnames. This list will be transformed into these BUNDLE_HOSTNAME__WITH__UNDERLINES and used as a grep
      # filter to filter out ALL OTHER lines in the ~/.bundle config. We do not want actual bundler configuration items
      # such as BUNDLE_BUILD... or BUNDLE_PATH... or BUNDLE_WITHOUT to affect our build.
      bundle_config_filter=$(tr '[:lower:]' '[:upper:]' <<< $VAULT_BUNDLE_CREDENTIALS | sed 's/\./__/g' | sed 's/  */\\|/g')
      grep -- "---\|$bundle_config_filter" ~/.bundle/config > /tmp/bundle_config
      mv /tmp/bundle_config ~/.bundle/config
    fi

  done

  log "Using ssh key: $VAULT_SSH_KEY"
  if [[  "$VAULT_SSH_KEY" != "id_rsa" ]]; then
    # configure the ssh to any host to use this ssh key
    echo -e "\nHost *\nIdentityFile ~/.ssh/$VAULT_SSH_KEY" >> ~/.ssh/config
  fi

  if [[ "$DISABLE_PASSWORD" != "" ]]; then
    ssh-keygen -p -P $DISABLE_PASSWORD -N "" -f ~/.ssh/$VAULT_SSH_KEY
  fi

  # restore 'no_proxy' for executing the actual command
  export no_proxy="$no_proxy_old"

  log "Executing command: $@"
  "$@"

  log "Removing private keys..."
  for vault_dir in $VAULT_DIRS; do
    rm -rf ~/.${vault_dir}
    if [[ -e ${tmp_vault}/.${vault_dir} ]]; then
      mv ${tmp_vault}/.${vault_dir} ~
    fi
  done
  rmdir $tmp_vault
else
  error "ERROR: Start the ${VAULT_IMAGE} container before using ONVAULT using the following command:"
  document_args=""
  if [[ "$VAULT_DIRS" != "ssh" ]]; then
    document_args="${document_args} -e VAULT_DIRS='${VAULT_DIRS}'"
  fi
  if [[ "$VAULT_PORT" = "tcp://${VAULT_HOST}:14242" ]]; then
    document_args="${document_args} -p ${VAULT_HOST}:14242:3000"
  fi
  for vault_dir in $VAULT_DIRS; do
    document_args="${document_args} -v ~/.${vault_dir}:/vault/.${vault_dir}"
  done

  error "  docker run --name vault -d${document_args} ${VAULT_IMAGE}"
  exit 1
fi

# vim: set ts=2 sw=2 tw=0 softtabstop=2 et :
