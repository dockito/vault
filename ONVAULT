#!/bin/bash

# signals bash to stop execution on any fail
set -e

# allow everriding default VAULT_HOST at runtime
# otherwise will get the docker bridge ip network
: ${VAULT_HOST:=$(ip route|awk '/default/{print $3}')}

# allow overriding (probably trough Docker Link) default VAULT_PORT at runtime
: ${VAULT_PORT:=tcp://${VAULT_HOST}:14242}

# allow overriding default VAULT_URI at runtime
: ${VAULT_URI:=${VAULT_PORT/tcp/http}}

# allow overriding default VAULT_SSH_KEY at runtime
: ${VAULT_SSH_KEY:=id_rsa}

log () {
  GREEN='\033[1;32m'
  NC='\033[0m' # No Color
  echo -e "${GREEN}[Dockito Vault]${NC} $@"
}

# don't go through proxy for accessing vault
no_proxy_old="$no_proxy"
export no_proxy="$VAULT_HOST"

if ! curl -s "${VAULT_URI}/_ping"; then
  COUNTER=0
  echo 'Waiting 10s for dockito/vault to be ready...'
  while ! curl -s "${VAULT_URI}/_ping" && [ $COUNTER != 10 ]; do
    sleep 1
    COUNTER=$[$COUNTER +1]
  done
fi

if curl -s "${VAULT_URI}/_ping"; then
  mkdir -p ~/.ssh/

  # check if is required the ssh backup
  ssh_backup_enabled="$(ls -A ~/.ssh)"

  # creating backup of existing ssh directory
  if [[ -n "$ssh_backup_enabled" ]]; then
    tmp_ssh_vault=~/".vault-backup-ssh-$(date +%s)"
    mkdir $tmp_ssh_vault
    cp -r ~/.ssh/* $tmp_ssh_vault
  fi

  log "Downloading private keys and git credentials ..."
  curl -s "${VAULT_URI}/ssh.tgz" | tar -C ~/.ssh/ -zxf -
  chown -f `whoami` ~/.ssh/* || true
  chmod -f 600 ~/.ssh/* || true

  if [ ! -f ~/.ssh/$VAULT_SSH_KEY ]; then
      log "Did not find ssh key: $VAULT_SSH_KEY"
  else
      log "Using ssh key: $VAULT_SSH_KEY"
  fi
  if [[  "$VAULT_SSH_KEY" != "id_rsa" ]]; then
    # configure the ssh to any host to use this ssh key
    echo -e "\nHost *\nIdentityFile ~/.ssh/$VAULT_SSH_KEY" >> ~/.ssh/config
  fi

  # download git credential store to temporary location
  tmp_git_credential_store=`mktemp ~/.git-credentials-XXXXXX`
  curl -s "${VAULT_URI}/git-credentials" > "$tmp_git_credential_store"

  # check number of credentials (== non-blank lines) for seeing if something is wrong
  credential_count=`cat "$tmp_git_credential_store" | sed '/^\s*$/d' | wc -l`
  if [ $credential_count -eq 0 ]; then
    log "Did not find any git https credentials"
  else
    log "Using $credential_count git https credential(s)"
  fi

  # configure git
  git_config_old_credential_helper=`git config --global credential.helper` || true
  git_config_old_core_askpass=`git config --global core.askpass` || true
  git config --global credential.helper "store --file=$tmp_git_credential_store"
  git config --global core.askpass true

  # restore 'no_proxy' for executing the actual command
  export no_proxy="$no_proxy_old"

  log "Executing command: $@"
  eval $@

  log "Removing private keys and git credentials..."
  rm -rf ~/.ssh/*

  # copying backup to ssh directory
  if [[ -n "$ssh_backup_enabled" ]]; then
    cp -r $tmp_ssh_vault/* ~/.ssh
    rm -rf $tmp_ssh_vault
  fi

  rm $tmp_git_credential_store

  # restoring old setting
  git config --global credential.helper "$git_config_old_credential_helper"
  git config --global core.askpass "$git_config_old_core_askpass"

else
  log "ERROR: Start the dockito/vault container before using ONVAULT!"
  log "ex: docker run -d -p ${VAULT_HOST}:14242:3000 -v ~/.ssh:/vault/.ssh dockito/vault"
  exit 1
fi
